author: Gibbons, Jeremy
author_list:
- affiliation: []
  family: Gibbons
  given: Jeremy
citations:
- doi: 10.4204/EPTCS.198.1
  unstructured: 'Abe, A., Sumii, E.: A simple and practical linear algebra library
    interface with static size checking. In: Kiselyov, O., Garrigue, J. (eds.) ML
    Family Workshop. EPTCS, vol. 198, pp. 1–21 (2014)'
- author: E Axelsson
  doi: 10.1007/978-3-642-24276-2_8
  first-page: '121'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Axelsson, E., Claessen, K., Sheeran, M., Svenningsson, J., Engdal,
    D., Persson, A.: The design and implementation of feldspar. In: Hage, J., Morazán,
    M.T. (eds.) IFL 2010. LNCS, vol. 6647, pp. 121–136. Springer, Heidelberg (2011).
    doi:10.1007/978-3-642-24276-2_8'
  volume-title: Implementation and Application of Functional Languages
  year: '2011'
- doi: 10.1145/2503778.2503781
  unstructured: 'Bird, R., Gibbons, J., Mehner, S., Voigtländer, J., Schrijvers, T.:
    Understanding idiomatic traversals backwards and forwards. In: Haskell Symposium.
    ACM (2013)'
- author: R Bird
  doi: 10.1007/BFb0054285
  first-page: '52'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Bird, R., Meertens, L.: Nested datatypes. In: Jeuring, J. (ed.) MPC
    1998. LNCS, vol. 1422, pp. 52–67. Springer, Heidelberg (1998). doi:10.1007/BFb0054285'
  volume-title: Mathematics of Program Construction
  year: '1998'
- doi: 10.1145/1926354.1926358
  unstructured: 'Chakravarty, M.M.T., Keller, G., Lee, S., McDonell, T.L., Grover,
    V.: Accelerating Haskell array codes with multicore GPUs. In: Declarative Aspects
    of Multicore Programming, pp. 3–14. ACM (2011)'
- doi: 10.1145/2103736.2103740
  unstructured: 'Claessen, K., Sheeran, M., Svensson, B.J.: Expressive array constructs
    in an embedded GPU kernel programming language. In: Declarative Aspects of Multicore
    Programming, pp. 21–30. ACM (2012)'
- doi: 10.1145/1159842.1159859
  unstructured: 'Eaton, F.: Statically typed linear algebra in Haskell (demo). In:
    Haskell Workshop, pp. 120–121. ACM (2006)'
- author: C Elliott
  doi: 10.1007/978-1-349-91518-7_7
  first-page: '131'
  unstructured: 'Elliott, C.: Functional images. In: Gibbons, J., de Moor, O. (eds.)
    The Fun of Programming. Cornerstones in Computing, pp. 131–150. Palgrave, Basingstoke
    (2003)'
  volume-title: The Fun of Programming. Cornerstones in Computing
  year: '2003'
- doi: 10.1145/258948.258973
  unstructured: 'Elliott, C., Hudak, P.: Functional reactive animation. In: International
    Conference on Functional Programming. ACM (1997)'
- doi: 10.1145/2627373.2627390
  unstructured: 'Elsman, M., Dybdal, M.: Compiling a subset of APL into a typed intermediate
    language. In: Workshop on Libraries, Languages, and Compilers for Array Programming,
    pp. 101–106. ACM (2014)'
- author: M Felleisen
  unstructured: 'Felleisen, M., Findler, R.B., Flatt, M.: Semantics Engineering with
    PLT Redex. MIT Press, Cambridge (2009)'
  volume-title: Semantics Engineering with PLT Redex
  year: '2009'
- author: RA Finkel
  doi: 10.1007/BF00288933
  first-page: '1'
  issue: '1'
  journal-title: Acta Informatica
  unstructured: 'Finkel, R.A., Bentley, J.L.: Quad trees: a data structure for retrieval
    on composite keys. Acta Informatica 4(1), 1–9 (1974)'
  volume: '4'
  year: '1974'
- unstructured: 'GHC Team: Glasgow Haskell Compiler. https://www.haskell.org/ghc/'
- doi: 10.1145/2976022.2976023
  unstructured: 'Gibbons, J.: APLicative programming with Naperian functors: Haskell
    code, January 2017. http://www.cs.ox.ac.uk/jeremy.gibbons/publications/aplicative.hs'
- author: J Gibbons
  doi: 10.1007/978-1-349-91518-7
  unstructured: 'Gibbons, J., de Moor, O.: The Fun of Programming. Cornerstones in
    Computing. Palgrave, Basingstoke (2003)'
  volume-title: The Fun of Programming. Cornerstones in Computing
  year: '2003'
- doi: 10.1145/512760.512761
  unstructured: 'Guibas, L.J., Wyatt, D.K.: Compilation and delayed evaluation in
    APL. In: Principles of Programming Languages, pp. 1–8. ACM (1978)'
- unstructured: Peter Hancock. What is a Naperian container? June 2005. http://sneezy.cs.nott.ac.uk/containers/blog/?p=14
- author: R Hinze
  doi: 10.1017/S095679680100404X
  first-page: '493'
  issue: '5'
  journal-title: J. Funct. Program.
  unstructured: 'Hinze, R.: Manufacturing datatypes. J. Funct. Program. 11(5), 493–524
    (2001)'
  volume: '11'
  year: '2001'
- author: R Hinze
  doi: 10.1007/978-1-349-91518-7_12
  first-page: '245'
  unstructured: 'Hinze, R.: Fun with phantom types. In: Gibbons, J., de Moor, O. (eds.)
    The Fun of Programming. Cornerstones in Computing, pp. 245–262. Palgrave, Basingstoke
    (2003)'
  volume-title: The Fun of Programming. Cornerstones in Computing
  year: '2003'
- unstructured: 'Hudak, P., Jones, M.P.: Haskell vs Ada vs C++ vs Awk vs ...: an experiment
    in software prototyping productivity. Department of Computer Science, Yale, July
    1994'
- author: KE Iverson
  doi: 10.1145/1460833.1460872
  unstructured: 'Iverson, K.E.: A Programming Language. Wiley, Hoboken (1962)'
  volume-title: A Programming Language
  year: '1962'
- author: CB Jay
  doi: 10.1007/3-540-57880-3_20
  first-page: '302'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Jay, C.B., Cockett, J.R.B.: Shapely types and shape polymorphism.
    In: Sannella, D. (ed.) ESOP 1994. LNCS, vol. 788, pp. 302–316. Springer, Heidelberg
    (1994). doi:10.1007/3-540-57880-3_20'
  volume-title: Programming Languages and Systems — ESOP ’94
  year: '1994'
- unstructured: 'Jsoftware, Inc. Jsoftware: High performance development platform
    (2016). http://www.jsoftware.com'
- doi: 10.1145/1932681.1863582
  unstructured: 'Keller, G., Chakravarty, M., Leschchinskiy, R., Jones, S.P., Lippmeier,
    B.: Regular, shape-polymorphic parallel arrays in Haskell. In: International Conference
    on Functional Programming, pp. 261–272. ACM (2010)'
- doi: 10.1145/2578854.2503786
  unstructured: 'Lindley, S., McBride, C.: Hasochism: the pleasure and pain of dependently
    typed Haskell programming. In: Haskell Symposium, pp. 81–92. ACM (2013)'
- author: C McBride
  doi: 10.1017/S0956796807006326
  first-page: '1'
  issue: '1'
  journal-title: J. Funct. Program.
  unstructured: 'McBride, C., Paterson, R.: Applicative programming with effects.
    J. Funct. Program. 18(1), 1–13 (2008)'
  volume: '18'
  year: '2008'
- doi: 10.1145/1111037.1111038
  unstructured: 'McKinna, J.: Why dependent types matter. In: Principles of Programming
    Languages, p. 1. ACM (2006). http://www.cs.nott.ac.uk/ psztxa/publ/ydtm.pdf'
- author: A Mycroft
  doi: 10.1007/3-540-12925-1_41
  first-page: '217'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Mycroft, A.: Polymorphic type schemes and recursive definitions.
    In: Paul, M., Robinet, B. (eds.) Programming 1984. LNCS, vol. 167, pp. 217–228.
    Springer, Heidelberg (1984). doi:10.1007/3-540-12925-1_41'
  volume-title: International Symposium on Programming
  year: '1984'
- author: C Okasaki
  doi: 10.1017/CBO9780511530104
  unstructured: 'Okasaki, C.: Purely Functional Data Structures. CUP, Cambridge (1998)'
  volume-title: Purely Functional Data Structures
  year: '1998'
- doi: 10.1007/3540543961_30
  unstructured: 'Jones, S.P., Launchbury, J.: Unboxed values as first class citizens
    in a non-strict functional language. In: Functional Programming Languages and
    Computer Architecture, pp. 636–666. ACM (1991)'
- unstructured: 'Eriksson, A.S., Jansson, P.: An Agda formalisation of the transitive
    closure of block matrices (extended abstract). In: Type-Driven Development, pp.
    60–61. ACM (2016)'
- author: S-B Scholz
  doi: 10.1007/11894100_3
  first-page: '62'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Scholz, S.-B.: Functional array programming in SaC. In: Horváth,
    Z. (ed.) CEFP 2005. LNCS, vol. 4164, pp. 62–99. Springer, Heidelberg (2006). doi:10.1007/11894100_3'
  volume-title: Central European Functional Programming School
  year: '2006'
- doi: 10.1145/2887747.2804304
  unstructured: 'Serrano, A., Hage, J., Bahr, P.: Type families with class, type classes
    with family. In: Haskell Symposium, pp. 129–140. ACM (2015)'
- author: J Slepak
  doi: 10.1007/978-3-642-54833-8_3
  first-page: '27'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Slepak, J., Shivers, O., Manolios, P.: An array-oriented language
    with static rank polymorphism. In: Shao, Z. (ed.) ESOP 2014. LNCS, vol. 8410,
    pp. 27–46. Springer, Heidelberg (2014). doi:10.1007/978-3-642-54833-8_3'
  volume-title: Programming Languages and Systems
  year: '2014'
- author: P Thiemann
  doi: 10.1007/978-3-642-41582-1_11
  first-page: '174'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Thiemann, P., Chakravarty, M.M.T.: Agda meets accelerate. In: Hinze,
    R. (ed.) IFL 2012. LNCS, vol. 8241, pp. 174–189. Springer, Heidelberg (2013).
    doi:10.1007/978-3-642-41582-1_11'
  volume-title: Implementation and Application of Functional Languages
  year: '2013'
- author: K Trojahner
  doi: 10.1016/j.jlap.2009.03.002
  first-page: '643'
  issue: '7'
  journal-title: J. Logic Algebraic Program.
  unstructured: 'Trojahner, K., Grelck, C.: Dependently typed array programs don’t
    go wrong. J. Logic Algebraic Program. 78(7), 643–664 (2009)'
  volume: '78'
  year: '2009'
- author: TL Veldhuizen
  doi: 10.1007/3-540-49372-7_24
  first-page: '223'
  series-title: Lecture Notes in Computer Science
  unstructured: 'Veldhuizen, T.L.: Arrays in Blitz++. In: Caromel, D., Oldehoeft,
    R.R., Tholburn, M. (eds.) ISCOPE 1998. LNCS, vol. 1505, pp. 223–230. Springer,
    Heidelberg (1998). doi:10.1007/3-540-49372-7_24'
  volume-title: Computing in Object-Oriented Parallel Environments
  year: '1998'
- doi: 10.1145/277650.277732
  unstructured: 'Xi, H., Pfenning, F.: Eliminating array bound checking through dependent
    types. In: Programming Language Design and Implementation. ACM (1998)'
- doi: 10.1145/2103786.2103795
  unstructured: 'Yorgey, B.A., Weirich, S., Cretin, J., Jones, S.P., Vytiniotis, D.,
    Magalhães, J.P.: Giving Haskell a promotion. In: Types in Language Design and
    Implementation, pp. 53–66. ACM (2012)'
doc_url: https://link.springer.com/content/pdf/10.1007/978-3-662-54434-1_21
doi: 10.1007/978-3-662-54434-1_21
files: []
isbn:
- '9783662544334'
- '9783662544341'
journal: Programming Languages and Systems
month: 3
pages: 556--583
papis_id: edaed831b51fcc262ec580f63dbf239e
publisher: Springer Berlin Heidelberg
ref: AplicativeProgGibbon2017
title: APLicative Programming with Naperian Functors
type: inbook
url: http://dx.doi.org/10.1007/978-3-662-54434-1_21
year: 2017
