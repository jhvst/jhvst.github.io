@article{doctoral_thesis_mogers,
  author = {Mogers, Naums},
  doi = {10.7488/era/3587},
  title = {Guided rewriting and constraint satisfaction for parallel GPU code generation},
  url = {http://dx.doi.org/10.7488/era/3587},
  year = {2023},
}

@article{ContinuationPaGibbon2021,
  author = {Gibbons, Jeremy},
  doi = {10.22152/programming-journal.org/2022/6/7},
  issue = {2},
  journal = {The Art, Science, and Engineering of Programming},
  language = {en},
  month = {11},
  publisher = {Aspect-Oriented Software Association (AOSA)},
  title = {Continuation-Passing Style, Defunctionalization, Accumulations, and Associativity},
  url = {http://dx.doi.org/10.22152/programming-journal.org/2022/6/7},
  volume = {6},
  year = {2021},
}

@inbook{AplicativeProgGibbon2017,
  author = {Gibbons, Jeremy},
  doi = {10.1007/978-3-662-54434-1\_21},
  isbn = {['9783662544334', '9783662544341']},
  journal = {Programming Languages and Systems},
  month = {3},
  pages = {556--583},
  publisher = {Springer Berlin Heidelberg},
  title = {APLicative Programming with Naperian~Functors},
  url = {http://dx.doi.org/10.1007/978-3-662-54434-1\_21},
  year = {2017},
}

@article{SsaIsFunctionAppel1998,
  author = {Appel, Andrew W.},
  doi = {10.1145/278283.278285},
  issue = {4},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  month = {4},
  pages = {17--20},
  publisher = {Association for Computing Machinery (ACM)},
  title = {SSA is functional programming},
  url = {http://dx.doi.org/10.1145/278283.278285},
  volume = {33},
  year = {1998},
}

@article{augeas,
  author = {Lutterkort, David},
  title = {AUGEAS - a configuration API},
  url = {https://www.kernel.org/doc/ols/2008/ols2008v2-pages-47-56.pdf},
}

@article{act2023par,
  author = {Wilson, Paul and Zanasi, Fabio},
  title = {Data-Parallel Algorithms for String Diagrams},
  url = {https://act2023.github.io/papers/paper32.pdf},
}

@article{TowardsHaskellEpstei2012,
  abstract = {<jats:p>We present Cloud Haskell, a domain-specific language for developing programs for a distributed computing environment. Implemented as a shallow embedding in Haskell, it provides a message-passing communication model, inspired by Erlang, without introducing incompatibility with Haskell's established shared-memory concurrency. A key contribution is a method for serializing function closures for transmission across the network. Cloud Haskell has been implemented; we present example code and some preliminary performance measurements.</jats:p>},
  author = {Epstein, Jeff and Black, Andrew P. and Peyton-Jones, Simon},
  doi = {10.1145/2096148.2034690},
  issue = {12},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  month = {1},
  pages = {118--129},
  publisher = {Association for Computing Machinery (ACM)},
  title = {Towards Haskell in the cloud},
  url = {http://dx.doi.org/10.1145/2096148.2034690},
  volume = {46},
  year = {2012},
}

@inbook{TypeSystemsFoMcbrid2022,
  author = {McBride, Conor and Nordvall-Forsberg, Fredrik},
  doi = {10.1142/9789811242380\_0020},
  journal = {Series on Advances in Mathematics for Applied Sciences},
  month = {2},
  pages = {331--345},
  publisher = {WORLD SCIENTIFIC},
  title = {Type systems for programs respecting dimensions},
  url = {http://dx.doi.org/10.1142/9789811242380\_0020},
  year = {2022},
}

@article{IntroductionToShiver2019,
  abstract = {Remora is a higher-order, rank-polymorphic array-processing programming language, in the same general class of languages as APL and J. It is intended for writing programs to be executed on parallel hardware.   We provide an example-driven introduction to the language, and its general computational model, originally developed by Iverson for APL. We begin with Dynamic Remora, a variant of the language with a dynamic type system (as in Scheme or Lisp), to introduce the fundamental computational mechanisms of the language, then shift to Explicitly Typed Remora, a variant of the language with a static, dependent type system that permits the shape of the arrays being computed to be captured at compile time.   This article can be considered an introduction to the general topic of the rank-polymorphic array-processing computational model, above and beyond the specific details of the Remora language.   We do not address the details of type inference in Remora, that is, the assignment of explicit types to programs written without such annotations; this is ongoing research.},
  archiveprefix = {arXiv},
  author = {Shivers, Olin and Slepak, Justin and Manolios, Panagiotis},
  eprint = {1912.13451v2},
  file = {1912.13451v2.pdf},
  month = {Dec},
  primaryclass = {cs.PL},
  title = {Introduction to Rank-polymorphic Programming in Remora (Draft)},
  url = {http://arxiv.org/abs/1912.13451v2},
  year = {2019},
}@article{doctoral_thesis_mogers,
  author = {Mogers, Naums},
  doi = {10.7488/era/3587},
  title = {Guided rewriting and constraint satisfaction for parallel GPU code generation},
  url = {http://dx.doi.org/10.7488/era/3587},
  year = {2023},
}

@article{ContinuationPaGibbon2021,
  author = {Gibbons, Jeremy},
  doi = {10.22152/programming-journal.org/2022/6/7},
  issue = {2},
  journal = {The Art, Science, and Engineering of Programming},
  language = {en},
  month = {11},
  publisher = {Aspect-Oriented Software Association (AOSA)},
  title = {Continuation-Passing Style, Defunctionalization, Accumulations, and Associativity},
  url = {http://dx.doi.org/10.22152/programming-journal.org/2022/6/7},
  volume = {6},
  year = {2021},
}

@inbook{AplicativeProgGibbon2017,
  author = {Gibbons, Jeremy},
  doi = {10.1007/978-3-662-54434-1\_21},
  isbn = {['9783662544334', '9783662544341']},
  journal = {Programming Languages and Systems},
  month = {3},
  pages = {556--583},
  publisher = {Springer Berlin Heidelberg},
  title = {APLicative Programming with Naperian~Functors},
  url = {http://dx.doi.org/10.1007/978-3-662-54434-1\_21},
  year = {2017},
}

@article{SsaIsFunctionAppel1998,
  author = {Appel, Andrew W.},
  doi = {10.1145/278283.278285},
  issue = {4},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  month = {4},
  pages = {17--20},
  publisher = {Association for Computing Machinery (ACM)},
  title = {SSA is functional programming},
  url = {http://dx.doi.org/10.1145/278283.278285},
  volume = {33},
  year = {1998},
}

@article{augeas,
  author = {Lutterkort, David},
  title = {AUGEAS - a configuration API},
  url = {https://www.kernel.org/doc/ols/2008/ols2008v2-pages-47-56.pdf},
}

@article{act2023par,
  author = {Wilson, Paul and Zanasi, Fabio},
  title = {Data-Parallel Algorithms for String Diagrams},
  url = {https://act2023.github.io/papers/paper32.pdf},
}

@article{TowardsHaskellEpstei2012,
  abstract = {<jats:p>We present Cloud Haskell, a domain-specific language for developing programs for a distributed computing environment. Implemented as a shallow embedding in Haskell, it provides a message-passing communication model, inspired by Erlang, without introducing incompatibility with Haskell's established shared-memory concurrency. A key contribution is a method for serializing function closures for transmission across the network. Cloud Haskell has been implemented; we present example code and some preliminary performance measurements.</jats:p>},
  author = {Epstein, Jeff and Black, Andrew P. and Peyton-Jones, Simon},
  doi = {10.1145/2096148.2034690},
  issue = {12},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  month = {1},
  pages = {118--129},
  publisher = {Association for Computing Machinery (ACM)},
  title = {Towards Haskell in the cloud},
  url = {http://dx.doi.org/10.1145/2096148.2034690},
  volume = {46},
  year = {2012},
}

@inbook{TypeSystemsFoMcbrid2022,
  author = {McBride, Conor and Nordvall-Forsberg, Fredrik},
  doi = {10.1142/9789811242380\_0020},
  journal = {Series on Advances in Mathematics for Applied Sciences},
  month = {2},
  pages = {331--345},
  publisher = {WORLD SCIENTIFIC},
  title = {Type systems for programs respecting dimensions},
  url = {http://dx.doi.org/10.1142/9789811242380\_0020},
  year = {2022},
}

@article{IntroductionToShiver2019,
  abstract = {Remora is a higher-order, rank-polymorphic array-processing programming language, in the same general class of languages as APL and J. It is intended for writing programs to be executed on parallel hardware.   We provide an example-driven introduction to the language, and its general computational model, originally developed by Iverson for APL. We begin with Dynamic Remora, a variant of the language with a dynamic type system (as in Scheme or Lisp), to introduce the fundamental computational mechanisms of the language, then shift to Explicitly Typed Remora, a variant of the language with a static, dependent type system that permits the shape of the arrays being computed to be captured at compile time.   This article can be considered an introduction to the general topic of the rank-polymorphic array-processing computational model, above and beyond the specific details of the Remora language.   We do not address the details of type inference in Remora, that is, the assignment of explicit types to programs written without such annotations; this is ongoing research.},
  archiveprefix = {arXiv},
  author = {Shivers, Olin and Slepak, Justin and Manolios, Panagiotis},
  eprint = {1912.13451v2},
  file = {1912.13451v2.pdf},
  month = {Dec},
  primaryclass = {cs.PL},
  title = {Introduction to Rank-polymorphic Programming in Remora (Draft)},
  url = {http://arxiv.org/abs/1912.13451v2},
  year = {2019},
}@article{doctoral_thesis_mogers,
  author = {Mogers, Naums},
  doi = {10.7488/era/3587},
  title = {Guided rewriting and constraint satisfaction for parallel GPU code generation},
  url = {http://dx.doi.org/10.7488/era/3587},
  year = {2023},
}

@article{ContinuationPaGibbon2021,
  author = {Gibbons, Jeremy},
  doi = {10.22152/programming-journal.org/2022/6/7},
  issue = {2},
  journal = {The Art, Science, and Engineering of Programming},
  language = {en},
  month = {11},
  publisher = {Aspect-Oriented Software Association (AOSA)},
  title = {Continuation-Passing Style, Defunctionalization, Accumulations, and Associativity},
  url = {http://dx.doi.org/10.22152/programming-journal.org/2022/6/7},
  volume = {6},
  year = {2021},
}

@article{GettingToThePaszke2021,
  abstract = {We present a novel programming language design that attempts to combine the clarity and safety of high-level functional languages with the efficiency and parallelism of low-level numerical languages. We treat arrays as eagerly-memoized functions on typed index sets, allowing abstract function manipulations, such as currying, to work on arrays. In contrast to composing primitive bulk-array operations, we argue for an explicit nested indexing style that mirrors application of functions to arguments. We also introduce a fine-grained typed effects system which affords concise and automatically-parallelized in-place updates. Specifically, an associative accumulation effect allows reverse-mode automatic differentiation of in-place updates in a way that preserves parallelism. Empirically, we benchmark against the Futhark array programming language, and demonstrate that aggressive inlining and type-driven compilation allows array programs to be written in an expressive, "pointful" style with little performance penalty.},
  archiveprefix = {arXiv},
  author = {Paszke, Adam and Johnson, Daniel and Duvenaud, David and Vytiniotis, Dimitrios and Radul, Alexey and Johnson, Matthew and Ragan-Kelley, Jonathan and Maclaurin, Dougal},
  eprint = {2104.05372v1},
  file = {2104.05372v1.pdf},
  month = {Apr},
  primaryclass = {cs.PL},
  title = {Getting to the Point. Index Sets and Parallelism-Preserving Autodiff for   Pointful Array Programming},
  url = {http://arxiv.org/abs/2104.05372v1},
  year = {2021},
}

@inbook{AplicativeProgGibbon2017,
  author = {Gibbons, Jeremy},
  doi = {10.1007/978-3-662-54434-1\_21},
  isbn = {['9783662544334', '9783662544341']},
  journal = {Programming Languages and Systems},
  month = {3},
  pages = {556--583},
  publisher = {Springer Berlin Heidelberg},
  title = {APLicative Programming with Naperian~Functors},
  url = {http://dx.doi.org/10.1007/978-3-662-54434-1\_21},
  year = {2017},
}

@article{SsaIsFunctionAppel1998,
  author = {Appel, Andrew W.},
  doi = {10.1145/278283.278285},
  issue = {4},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  month = {4},
  pages = {17--20},
  publisher = {Association for Computing Machinery (ACM)},
  title = {SSA is functional programming},
  url = {http://dx.doi.org/10.1145/278283.278285},
  volume = {33},
  year = {1998},
}

@article{augeas,
  author = {Lutterkort, David},
  title = {AUGEAS - a configuration API},
  url = {https://www.kernel.org/doc/ols/2008/ols2008v2-pages-47-56.pdf},
}

@article{IntroductionToShiver2019,
  abstract = {Remora is a higher-order, rank-polymorphic array-processing programming language, in the same general class of languages as APL and J. It is intended for writing programs to be executed on parallel hardware.   We provide an example-driven introduction to the language, and its general computational model, originally developed by Iverson for APL. We begin with Dynamic Remora, a variant of the language with a dynamic type system (as in Scheme or Lisp), to introduce the fundamental computational mechanisms of the language, then shift to Explicitly Typed Remora, a variant of the language with a static, dependent type system that permits the shape of the arrays being computed to be captured at compile time.   This article can be considered an introduction to the general topic of the rank-polymorphic array-processing computational model, above and beyond the specific details of the Remora language.   We do not address the details of type inference in Remora, that is, the assignment of explicit types to programs written without such annotations; this is ongoing research.},
  archiveprefix = {arXiv},
  author = {Shivers, Olin and Slepak, Justin and Manolios, Panagiotis},
  eprint = {1912.13451v2},
  file = {1912.13451v2.pdf},
  month = {Dec},
  primaryclass = {cs.PL},
  title = {Introduction to Rank-polymorphic Programming in Remora (Draft)},
  url = {http://arxiv.org/abs/1912.13451v2},
  year = {2019},
}

@article{act2023par,
  author = {Wilson, Paul and Zanasi, Fabio},
  title = {Data-Parallel Algorithms for String Diagrams},
  url = {https://act2023.github.io/papers/paper32.pdf},
}

@article{TowardsHaskellEpstei2012,
  abstract = {<jats:p>We present Cloud Haskell, a domain-specific language for developing programs for a distributed computing environment. Implemented as a shallow embedding in Haskell, it provides a message-passing communication model, inspired by Erlang, without introducing incompatibility with Haskell's established shared-memory concurrency. A key contribution is a method for serializing function closures for transmission across the network. Cloud Haskell has been implemented; we present example code and some preliminary performance measurements.</jats:p>},
  author = {Epstein, Jeff and Black, Andrew P. and Peyton-Jones, Simon},
  doi = {10.1145/2096148.2034690},
  issue = {12},
  journal = {ACM SIGPLAN Notices},
  language = {en},
  month = {1},
  pages = {118--129},
  publisher = {Association for Computing Machinery (ACM)},
  title = {Towards Haskell in the cloud},
  url = {http://dx.doi.org/10.1145/2096148.2034690},
  volume = {46},
  year = {2012},
}

@inbook{TypeSystemsFoMcbrid2022,
  author = {McBride, Conor and Nordvall-Forsberg, Fredrik},
  doi = {10.1142/9789811242380\_0020},
  journal = {Series on Advances in Mathematics for Applied Sciences},
  month = {2},
  pages = {331--345},
  publisher = {WORLD SCIENTIFIC},
  title = {Type systems for programs respecting dimensions},
  url = {http://dx.doi.org/10.1142/9789811242380\_0020},
  year = {2022},
}